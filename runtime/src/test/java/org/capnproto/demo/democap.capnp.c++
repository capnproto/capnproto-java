// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: democap.capnp

#include "democap.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<40> b_a65f4a3d7f622e6b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    107,  46,  98, 127,  61,  74,  95, 166,
     14,   0,   0,   0,   3,   0,   0,   0,
     69, 169, 165, 176, 163,  75, 159, 242,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 135,   0,   0,   0,
    113,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 109, 111,  99,  97, 112,  46,
     99,  97, 112, 110, 112,  58,  84, 101,
    115, 116,  67,  97, 112,  48,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18, 240, 128, 209, 172, 180,   1, 179,
    129,  40, 181,  33,  84,  46, 164, 150,
     49,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     87,   9,  34, 182, 168,  99,   3, 225,
     62, 219,  93, 212, 228,  46, 133, 153,
     29,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   7,   0,   0,   0,
    116, 101, 115, 116,  77, 101, 116, 104,
    111, 100,  48,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    116, 101, 115, 116,  77, 101, 116, 104,
    111, 100,  49,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_a65f4a3d7f622e6b = b_a65f4a3d7f622e6b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a65f4a3d7f622e6b[] = {
  &s_96a42e5421b52881,
  &s_99852ee4d45ddb3e,
  &s_b301b4acd180f012,
  &s_e10363a8b6220957,
};
static const uint16_t m_a65f4a3d7f622e6b[] = {0, 1};
const ::capnp::_::RawSchema s_a65f4a3d7f622e6b = {
  0xa65f4a3d7f622e6b, b_a65f4a3d7f622e6b.words, 40, d_a65f4a3d7f622e6b, m_a65f4a3d7f622e6b,
  4, 2, nullptr, nullptr, nullptr, { &s_a65f4a3d7f622e6b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_81da3f8f6079c216 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     22, 194, 121,  96, 143,  63, 218, 129,
     14,   0,   0,   0,   3,   0,   0,   0,
     69, 169, 165, 176, 163,  75, 159, 242,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 109, 111,  99,  97, 112,  46,
     99,  97, 112, 110, 112,  58,  84, 101,
    115, 116,  67,  97, 112,  49,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_81da3f8f6079c216 = b_81da3f8f6079c216.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_81da3f8f6079c216 = {
  0x81da3f8f6079c216, b_81da3f8f6079c216.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_81da3f8f6079c216, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::TestParams0,  ::TestResults0>
TestCap0::Client::testMethod0Request(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::TestParams0,  ::TestResults0>(
      0xa65f4a3d7f622e6bull, 0, sizeHint);
}
::kj::Promise<void> TestCap0::Server::testMethod0(TestMethod0Context) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "democap.capnp:TestCap0", "testMethod0",
      0xa65f4a3d7f622e6bull, 0);
}
::capnp::Request< ::TestParams1,  ::TestResults1>
TestCap0::Client::testMethod1Request(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::TestParams1,  ::TestResults1>(
      0xa65f4a3d7f622e6bull, 1, sizeHint);
}
::kj::Promise<void> TestCap0::Server::testMethod1(TestMethod1Context) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "democap.capnp:TestCap0", "testMethod1",
      0xa65f4a3d7f622e6bull, 1);
}
::capnp::Capability::Server::DispatchCallResult TestCap0::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xa65f4a3d7f622e6bull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("democap.capnp:TestCap0", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult TestCap0::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        testMethod0(::capnp::Capability::Server::internalGetTypedContext<
             ::TestParams0,  ::TestResults0>(context)),
        false
      };
    case 1:
      return {
        testMethod1(::capnp::Capability::Server::internalGetTypedContext<
             ::TestParams1,  ::TestResults1>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "democap.capnp:TestCap0",
          0xa65f4a3d7f622e6bull, methodId);
  }
}
#endif  // !CAPNP_LITE

// TestCap0
#if !CAPNP_LITE
constexpr ::capnp::Kind TestCap0::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestCap0::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Capability::Server::DispatchCallResult TestCap1::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x81da3f8f6079c216ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("democap.capnp:TestCap1", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult TestCap1::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "democap.capnp:TestCap1",
          0x81da3f8f6079c216ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// TestCap1
#if !CAPNP_LITE
constexpr ::capnp::Kind TestCap1::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestCap1::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



