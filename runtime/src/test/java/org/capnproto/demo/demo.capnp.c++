// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: demo.capnp

#include "demo.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<37> b_91e1b138de965ab0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    176,  90, 150, 222,  56, 177, 225, 145,
     52,   0,   0,   0,   1,   0,   1,   0,
     66,  71, 232, 130,  21, 122,  87, 182,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  84, 101, 115, 116,
     80,  97, 114,  97, 109, 115,  48,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109,  48,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_91e1b138de965ab0 = b_91e1b138de965ab0.words;
#if !CAPNP_LITE
static const uint16_t m_91e1b138de965ab0[] = {0};
static const uint16_t i_91e1b138de965ab0[] = {0};
const ::capnp::_::RawSchema s_91e1b138de965ab0 = {
  0x91e1b138de965ab0, b_91e1b138de965ab0.words, 37, nullptr, m_91e1b138de965ab0,
  0, 1, i_91e1b138de965ab0, nullptr, nullptr, { &s_91e1b138de965ab0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_a77bdd3c3bd1dcbf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    191, 220, 209,  59,  60, 221, 123, 167,
     52,   0,   0,   0,   1,   0,   1,   0,
     66,  71, 232, 130,  21, 122,  87, 182,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  84, 101, 115, 116,
     82, 101, 115, 117, 108, 116, 115,  48,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,  48,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a77bdd3c3bd1dcbf = b_a77bdd3c3bd1dcbf.words;
#if !CAPNP_LITE
static const uint16_t m_a77bdd3c3bd1dcbf[] = {0};
static const uint16_t i_a77bdd3c3bd1dcbf[] = {0};
const ::capnp::_::RawSchema s_a77bdd3c3bd1dcbf = {
  0xa77bdd3c3bd1dcbf, b_a77bdd3c3bd1dcbf.words, 38, nullptr, m_a77bdd3c3bd1dcbf,
  0, 1, i_a77bdd3c3bd1dcbf, nullptr, nullptr, { &s_a77bdd3c3bd1dcbf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_b20f33e412339049 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     73, 144,  51,  18, 228,  51,  15, 178,
     52,   0,   0,   0,   1,   0,   0,   0,
     66,  71, 232, 130,  21, 122,  87, 182,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  84, 101, 115, 116,
     80,  97, 114,  97, 109, 115,  49,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109,  48,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b20f33e412339049 = b_b20f33e412339049.words;
#if !CAPNP_LITE
static const uint16_t m_b20f33e412339049[] = {0};
static const uint16_t i_b20f33e412339049[] = {0};
const ::capnp::_::RawSchema s_b20f33e412339049 = {
  0xb20f33e412339049, b_b20f33e412339049.words, 37, nullptr, m_b20f33e412339049,
  0, 1, i_b20f33e412339049, nullptr, nullptr, { &s_b20f33e412339049, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<68> b_d1342392ab536963 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     99, 105,  83, 171, 146,  35,  52, 209,
     52,   0,   0,   0,   1,   0,   0,   0,
     66,  71, 232, 130,  21, 122,  87, 182,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  84, 101, 115, 116,
     82, 101, 115, 117, 108, 116, 115,  49,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,  48,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 117, 108, 116,  49,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 117, 108, 116,  50,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d1342392ab536963 = b_d1342392ab536963.words;
#if !CAPNP_LITE
static const uint16_t m_d1342392ab536963[] = {0, 1, 2};
static const uint16_t i_d1342392ab536963[] = {0, 1, 2};
const ::capnp::_::RawSchema s_d1342392ab536963 = {
  0xd1342392ab536963, b_d1342392ab536963.words, 68, nullptr, m_d1342392ab536963,
  0, 3, i_d1342392ab536963, nullptr, nullptr, { &s_d1342392ab536963, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_b1af51b6aef0e7bc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    188, 231, 240, 174, 182,  81, 175, 177,
     52,   0,   0,   0,   1,   0,   1,   0,
     66,  71, 232, 130,  21, 122,  87, 182,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  83, 116, 114, 117,
     99, 116,  48,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    102,  48,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b1af51b6aef0e7bc = b_b1af51b6aef0e7bc.words;
#if !CAPNP_LITE
static const uint16_t m_b1af51b6aef0e7bc[] = {0};
static const uint16_t i_b1af51b6aef0e7bc[] = {0};
const ::capnp::_::RawSchema s_b1af51b6aef0e7bc = {
  0xb1af51b6aef0e7bc, b_b1af51b6aef0e7bc.words, 37, nullptr, m_b1af51b6aef0e7bc,
  0, 1, i_b1af51b6aef0e7bc, nullptr, nullptr, { &s_b1af51b6aef0e7bc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<43> b_ac6d126c2fac16eb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    235,  22, 172,  47, 108,  18, 109, 172,
     52,   0,   0,   0,   3,   0,   0,   0,
     66,  71, 232, 130,  21, 122,  87, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 135,   0,   0,   0,
    125,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  73, 102,  97,  99,
    101,  48,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     75,  41, 118, 170, 237, 119, 141, 188,
     62, 103, 132, 166,  74, 226,  68, 247,
     49,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     36, 243,  52, 210, 120,  91, 194, 200,
    110, 177, 192, 119,  51, 154,  95, 153,
     25,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   7,   0,   0,   0,
    109, 101, 116, 104, 111, 100,  48,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109, 101, 116, 104, 111, 100,  49,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ac6d126c2fac16eb = b_ac6d126c2fac16eb.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ac6d126c2fac16eb[] = {
  &s_995f9a3377c0b16e,
  &s_bc8d77edaa76294b,
  &s_c8c25b78d234f324,
  &s_f744e24aa684673e,
};
static const uint16_t m_ac6d126c2fac16eb[] = {0, 1};
const ::capnp::_::RawSchema s_ac6d126c2fac16eb = {
  0xac6d126c2fac16eb, b_ac6d126c2fac16eb.words, 43, d_ac6d126c2fac16eb, m_ac6d126c2fac16eb,
  4, 2, nullptr, nullptr, nullptr, { &s_ac6d126c2fac16eb, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_bc8d77edaa76294b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     75,  41, 118, 170, 237, 119, 141, 188,
     59,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  73, 102,  97,  99,
    101,  48,  46, 109, 101, 116, 104, 111,
    100,  48,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bc8d77edaa76294b = b_bc8d77edaa76294b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_bc8d77edaa76294b = {
  0xbc8d77edaa76294b, b_bc8d77edaa76294b.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_bc8d77edaa76294b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_f744e24aa684673e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     62, 103, 132, 166,  74, 226,  68, 247,
     59,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  73, 102,  97,  99,
    101,  48,  46, 109, 101, 116, 104, 111,
    100,  48,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f744e24aa684673e = b_f744e24aa684673e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f744e24aa684673e = {
  0xf744e24aa684673e, b_f744e24aa684673e.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f744e24aa684673e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_c8c25b78d234f324 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     36, 243,  52, 210, 120,  91, 194, 200,
     59,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  73, 102,  97,  99,
    101,  48,  46, 109, 101, 116, 104, 111,
    100,  49,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c8c25b78d234f324 = b_c8c25b78d234f324.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c8c25b78d234f324 = {
  0xc8c25b78d234f324, b_c8c25b78d234f324.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c8c25b78d234f324, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_a9395663e97ca3af = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    175, 163, 124, 233,  99,  86,  57, 169,
     52,   0,   0,   0,   1,   0,   0,   0,
     66,  71, 232, 130,  21, 122,  87, 182,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  83, 116, 114, 117,
     99, 116,  50,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    102,  48,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  49, 105,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    235,  22, 172,  47, 108,  18, 109, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a9395663e97ca3af = b_a9395663e97ca3af.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a9395663e97ca3af[] = {
  &s_ac6d126c2fac16eb,
};
static const uint16_t m_a9395663e97ca3af[] = {0, 1};
static const uint16_t i_a9395663e97ca3af[] = {0, 1};
const ::capnp::_::RawSchema s_a9395663e97ca3af = {
  0xa9395663e97ca3af, b_a9395663e97ca3af.words, 52, d_a9395663e97ca3af, m_a9395663e97ca3af,
  1, 2, i_a9395663e97ca3af, nullptr, nullptr, { &s_a9395663e97ca3af, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<45> b_9c0c5ee4bb0cc725 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     37, 199,  12, 187, 228,  94,  12, 156,
     52,   0,   0,   0,   3,   0,   0,   0,
     66,  71, 232, 130,  21, 122,  87, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 135,   0,   0,   0,
    133,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  84, 101, 115, 116,
     67,  97, 112,  48,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,  90, 150, 222,  56, 177, 225, 145,
    191, 220, 209,  59,  60, 221, 123, 167,
     49,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     73, 144,  51,  18, 228,  51,  15, 178,
     99, 105,  83, 171, 146,  35,  52, 209,
     29,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   7,   0,   0,   0,
    116, 101, 115, 116,  77, 101, 116, 104,
    111, 100,  48,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    116, 101, 115, 116,  77, 101, 116, 104,
    111, 100,  49,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_9c0c5ee4bb0cc725 = b_9c0c5ee4bb0cc725.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9c0c5ee4bb0cc725[] = {
  &s_91e1b138de965ab0,
  &s_a77bdd3c3bd1dcbf,
  &s_b20f33e412339049,
  &s_d1342392ab536963,
};
static const uint16_t m_9c0c5ee4bb0cc725[] = {0, 1};
const ::capnp::_::RawSchema s_9c0c5ee4bb0cc725 = {
  0x9c0c5ee4bb0cc725, b_9c0c5ee4bb0cc725.words, 45, d_9c0c5ee4bb0cc725, m_9c0c5ee4bb0cc725,
  4, 2, nullptr, nullptr, nullptr, { &s_9c0c5ee4bb0cc725, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<23> b_d88e8bb64ed6f7b1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    177, 247, 214,  78, 182, 139, 142, 216,
     52,   0,   0,   0,   3,   0,   0,   0,
     66,  71, 232, 130,  21, 122,  87, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  84, 101, 115, 116,
     67,  97, 112,  49,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d88e8bb64ed6f7b1 = b_d88e8bb64ed6f7b1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d88e8bb64ed6f7b1 = {
  0xd88e8bb64ed6f7b1, b_d88e8bb64ed6f7b1.words, 23, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d88e8bb64ed6f7b1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<46> b_d52dcf38c9f6f7c0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    192, 247, 246, 201,  56, 207,  45, 213,
     52,   0,   0,   0,   3,   0,   0,   0,
     66,  71, 232, 130,  21, 122,  87, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   1,   0,   0,
     49,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0, 135,   0,   0,   0,
    137,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  73, 102,  97,  99,
    101,  49,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     56, 221, 253, 251,  98, 168,  12, 128,
      1,   0,   0,   0,  66,   0,   0,   0,
     83, 116, 114, 117,  99, 116,  49,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    213,   4,  46,  99,  24, 202, 146, 143,
    143, 131,  24,  70, 254, 196, 103, 128,
     49,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    214,  90, 174,   3,   7, 146, 137, 240,
      6, 245,  17, 195, 170,  21, 109, 195,
     25,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   7,   0,   0,   0,
    109, 101, 116, 104, 111, 100,  48,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109, 101, 116, 104, 111, 100,  49,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d52dcf38c9f6f7c0 = b_d52dcf38c9f6f7c0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d52dcf38c9f6f7c0[] = {
  &s_8067c4fe4618838f,
  &s_8f92ca18632e04d5,
  &s_c36d15aac311f506,
  &s_f089920703ae5ad6,
};
static const uint16_t m_d52dcf38c9f6f7c0[] = {0, 1};
const ::capnp::_::RawSchema s_d52dcf38c9f6f7c0 = {
  0xd52dcf38c9f6f7c0, b_d52dcf38c9f6f7c0.words, 46, d_d52dcf38c9f6f7c0, m_d52dcf38c9f6f7c0,
  4, 2, nullptr, nullptr, nullptr, { &s_d52dcf38c9f6f7c0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<53> b_800ca862fbfddd38 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     56, 221, 253, 251,  98, 168,  12, 128,
     59,   0,   0,   0,   1,   0,   1,   0,
    192, 247, 246, 201,  56, 207,  45, 213,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  73, 102,  97,  99,
    101,  49,  46,  83, 116, 114, 117,  99,
    116,  49,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    102,  48,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  49,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_800ca862fbfddd38 = b_800ca862fbfddd38.words;
#if !CAPNP_LITE
static const uint16_t m_800ca862fbfddd38[] = {0, 1};
static const uint16_t i_800ca862fbfddd38[] = {0, 1};
const ::capnp::_::RawSchema s_800ca862fbfddd38 = {
  0x800ca862fbfddd38, b_800ca862fbfddd38.words, 53, nullptr, m_800ca862fbfddd38,
  0, 2, i_800ca862fbfddd38, nullptr, nullptr, { &s_800ca862fbfddd38, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_8f92ca18632e04d5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    213,   4,  46,  99,  24, 202, 146, 143,
     59,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  73, 102,  97,  99,
    101,  49,  46, 109, 101, 116, 104, 111,
    100,  48,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8f92ca18632e04d5 = b_8f92ca18632e04d5.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8f92ca18632e04d5 = {
  0x8f92ca18632e04d5, b_8f92ca18632e04d5.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8f92ca18632e04d5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<53> b_8067c4fe4618838f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    143, 131,  24,  70, 254, 196, 103, 128,
     59,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  73, 102,  97,  99,
    101,  49,  46, 109, 101, 116, 104, 111,
    100,  48,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,  48,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    188, 231, 240, 174, 182,  81, 175, 177,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 117, 108, 116,  49,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     56, 221, 253, 251,  98, 168,  12, 128,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8067c4fe4618838f = b_8067c4fe4618838f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8067c4fe4618838f[] = {
  &s_800ca862fbfddd38,
  &s_b1af51b6aef0e7bc,
};
static const uint16_t m_8067c4fe4618838f[] = {0, 1};
static const uint16_t i_8067c4fe4618838f[] = {0, 1};
const ::capnp::_::RawSchema s_8067c4fe4618838f = {
  0x8067c4fe4618838f, b_8067c4fe4618838f.words, 53, d_8067c4fe4618838f, m_8067c4fe4618838f,
  2, 2, i_8067c4fe4618838f, nullptr, nullptr, { &s_8067c4fe4618838f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_f089920703ae5ad6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    214,  90, 174,   3,   7, 146, 137, 240,
     59,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  73, 102,  97,  99,
    101,  49,  46, 109, 101, 116, 104, 111,
    100,  49,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f089920703ae5ad6 = b_f089920703ae5ad6.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f089920703ae5ad6 = {
  0xf089920703ae5ad6, b_f089920703ae5ad6.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f089920703ae5ad6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_c36d15aac311f506 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      6, 245,  17, 195, 170,  21, 109, 195,
     59,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 117, 110, 116, 105, 109, 101,  47,
    115, 114,  99,  47, 116, 101, 115, 116,
     47, 106,  97, 118,  97,  47, 111, 114,
    103,  47,  99,  97, 112, 110, 112, 114,
    111, 116, 111,  47, 100, 101, 109, 111,
     47, 100, 101, 109, 111,  46,  99,  97,
    112, 110, 112,  58,  73, 102,  97,  99,
    101,  49,  46, 109, 101, 116, 104, 111,
    100,  49,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 117, 108, 116,  48,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    235,  22, 172,  47, 108,  18, 109, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c36d15aac311f506 = b_c36d15aac311f506.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c36d15aac311f506[] = {
  &s_ac6d126c2fac16eb,
};
static const uint16_t m_c36d15aac311f506[] = {0};
static const uint16_t i_c36d15aac311f506[] = {0};
const ::capnp::_::RawSchema s_c36d15aac311f506 = {
  0xc36d15aac311f506, b_c36d15aac311f506.words, 38, d_c36d15aac311f506, m_c36d15aac311f506,
  1, 1, i_c36d15aac311f506, nullptr, nullptr, { &s_c36d15aac311f506, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// TestParams0
constexpr uint16_t TestParams0::_capnpPrivate::dataWordSize;
constexpr uint16_t TestParams0::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TestParams0::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestParams0::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TestResults0
constexpr uint16_t TestResults0::_capnpPrivate::dataWordSize;
constexpr uint16_t TestResults0::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TestResults0::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestResults0::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TestParams1
constexpr uint16_t TestParams1::_capnpPrivate::dataWordSize;
constexpr uint16_t TestParams1::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TestParams1::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestParams1::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TestResults1
constexpr uint16_t TestResults1::_capnpPrivate::dataWordSize;
constexpr uint16_t TestResults1::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TestResults1::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestResults1::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Struct0
constexpr uint16_t Struct0::_capnpPrivate::dataWordSize;
constexpr uint16_t Struct0::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Struct0::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Struct0::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::Iface0::Method0Params,  ::Iface0::Method0Results>
Iface0::Client::method0Request(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Iface0::Method0Params,  ::Iface0::Method0Results>(
      0xac6d126c2fac16ebull, 0, sizeHint);
}
::kj::Promise<void> Iface0::Server::method0(Method0Context) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "runtime/src/test/java/org/capnproto/demo/demo.capnp:Iface0", "method0",
      0xac6d126c2fac16ebull, 0);
}
::capnp::StreamingRequest< ::Iface0::Method1Params>
Iface0::Client::method1Request(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newStreamingCall< ::Iface0::Method1Params>(
      0xac6d126c2fac16ebull, 1, sizeHint);
}
::kj::Promise<void> Iface0::Server::method1(Method1Context) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "runtime/src/test/java/org/capnproto/demo/demo.capnp:Iface0", "method1",
      0xac6d126c2fac16ebull, 1);
}
::capnp::Capability::Server::DispatchCallResult Iface0::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xac6d126c2fac16ebull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("runtime/src/test/java/org/capnproto/demo/demo.capnp:Iface0", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Iface0::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        method0(::capnp::Capability::Server::internalGetTypedContext<
             ::Iface0::Method0Params,  ::Iface0::Method0Results>(context)),
        false
      };
    case 1:
      return {
        kj::evalNow([&]() {
          return method1(::capnp::Capability::Server::internalGetTypedStreamingContext<
               ::Iface0::Method1Params>(context));
        }),
        true
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "runtime/src/test/java/org/capnproto/demo/demo.capnp:Iface0",
          0xac6d126c2fac16ebull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Iface0
#if !CAPNP_LITE
constexpr ::capnp::Kind Iface0::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Iface0::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Iface0::Method0Params
constexpr uint16_t Iface0::Method0Params::_capnpPrivate::dataWordSize;
constexpr uint16_t Iface0::Method0Params::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Iface0::Method0Params::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Iface0::Method0Params::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Iface0::Method0Results
constexpr uint16_t Iface0::Method0Results::_capnpPrivate::dataWordSize;
constexpr uint16_t Iface0::Method0Results::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Iface0::Method0Results::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Iface0::Method0Results::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Iface0::Method1Params
constexpr uint16_t Iface0::Method1Params::_capnpPrivate::dataWordSize;
constexpr uint16_t Iface0::Method1Params::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Iface0::Method1Params::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Iface0::Method1Params::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Struct2
constexpr uint16_t Struct2::_capnpPrivate::dataWordSize;
constexpr uint16_t Struct2::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Struct2::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Struct2::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::TestParams0,  ::TestResults0>
TestCap0::Client::testMethod0Request(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::TestParams0,  ::TestResults0>(
      0x9c0c5ee4bb0cc725ull, 0, sizeHint);
}
::kj::Promise<void> TestCap0::Server::testMethod0(TestMethod0Context) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "runtime/src/test/java/org/capnproto/demo/demo.capnp:TestCap0", "testMethod0",
      0x9c0c5ee4bb0cc725ull, 0);
}
::capnp::Request< ::TestParams1,  ::TestResults1>
TestCap0::Client::testMethod1Request(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::TestParams1,  ::TestResults1>(
      0x9c0c5ee4bb0cc725ull, 1, sizeHint);
}
::kj::Promise<void> TestCap0::Server::testMethod1(TestMethod1Context) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "runtime/src/test/java/org/capnproto/demo/demo.capnp:TestCap0", "testMethod1",
      0x9c0c5ee4bb0cc725ull, 1);
}
::capnp::Capability::Server::DispatchCallResult TestCap0::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x9c0c5ee4bb0cc725ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("runtime/src/test/java/org/capnproto/demo/demo.capnp:TestCap0", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult TestCap0::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        testMethod0(::capnp::Capability::Server::internalGetTypedContext<
             ::TestParams0,  ::TestResults0>(context)),
        false
      };
    case 1:
      return {
        testMethod1(::capnp::Capability::Server::internalGetTypedContext<
             ::TestParams1,  ::TestResults1>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "runtime/src/test/java/org/capnproto/demo/demo.capnp:TestCap0",
          0x9c0c5ee4bb0cc725ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// TestCap0
#if !CAPNP_LITE
constexpr ::capnp::Kind TestCap0::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestCap0::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Capability::Server::DispatchCallResult TestCap1::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd88e8bb64ed6f7b1ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("runtime/src/test/java/org/capnproto/demo/demo.capnp:TestCap1", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult TestCap1::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "runtime/src/test/java/org/capnproto/demo/demo.capnp:TestCap1",
          0xd88e8bb64ed6f7b1ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// TestCap1
#if !CAPNP_LITE
constexpr ::capnp::Kind TestCap1::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TestCap1::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::Iface1::Method0Params,  ::Iface1::Method0Results>
Iface1::Client::method0Request(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Iface1::Method0Params,  ::Iface1::Method0Results>(
      0xd52dcf38c9f6f7c0ull, 0, sizeHint);
}
::kj::Promise<void> Iface1::Server::method0(Method0Context) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "runtime/src/test/java/org/capnproto/demo/demo.capnp:Iface1", "method0",
      0xd52dcf38c9f6f7c0ull, 0);
}
::capnp::Request< ::Iface1::Method1Params,  ::Iface1::Method1Results>
Iface1::Client::method1Request(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Iface1::Method1Params,  ::Iface1::Method1Results>(
      0xd52dcf38c9f6f7c0ull, 1, sizeHint);
}
::kj::Promise<void> Iface1::Server::method1(Method1Context) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "runtime/src/test/java/org/capnproto/demo/demo.capnp:Iface1", "method1",
      0xd52dcf38c9f6f7c0ull, 1);
}
::capnp::Capability::Server::DispatchCallResult Iface1::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd52dcf38c9f6f7c0ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("runtime/src/test/java/org/capnproto/demo/demo.capnp:Iface1", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Iface1::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        method0(::capnp::Capability::Server::internalGetTypedContext<
             ::Iface1::Method0Params,  ::Iface1::Method0Results>(context)),
        false
      };
    case 1:
      return {
        method1(::capnp::Capability::Server::internalGetTypedContext<
             ::Iface1::Method1Params,  ::Iface1::Method1Results>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "runtime/src/test/java/org/capnproto/demo/demo.capnp:Iface1",
          0xd52dcf38c9f6f7c0ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Iface1
#if !CAPNP_LITE
constexpr ::capnp::Kind Iface1::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Iface1::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Iface1::Struct1
constexpr uint16_t Iface1::Struct1::_capnpPrivate::dataWordSize;
constexpr uint16_t Iface1::Struct1::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Iface1::Struct1::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Iface1::Struct1::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Iface1::Method0Params
constexpr uint16_t Iface1::Method0Params::_capnpPrivate::dataWordSize;
constexpr uint16_t Iface1::Method0Params::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Iface1::Method0Params::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Iface1::Method0Params::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Iface1::Method0Results
constexpr uint16_t Iface1::Method0Results::_capnpPrivate::dataWordSize;
constexpr uint16_t Iface1::Method0Results::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Iface1::Method0Results::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Iface1::Method0Results::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Iface1::Method1Params
constexpr uint16_t Iface1::Method1Params::_capnpPrivate::dataWordSize;
constexpr uint16_t Iface1::Method1Params::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Iface1::Method1Params::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Iface1::Method1Params::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Iface1::Method1Results
constexpr uint16_t Iface1::Method1Results::_capnpPrivate::dataWordSize;
constexpr uint16_t Iface1::Method1Results::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Iface1::Method1Results::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Iface1::Method1Results::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



